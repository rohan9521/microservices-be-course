services:
  read:
    image: grafana/loki:latest
    command: "-config.file=/etc/loki/config.yaml -target=read"
    ports:
      - 3101:3100
      - 7946
      - 9095
    volumes:
      - ./loki-config.yaml:/etc/loki/config.yaml
    depends_on:
      - minio
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    extends:
      file: docker-compose-common.yaml
      service: microservice-configs

  write:
    image: grafana/loki:latest
    command: "-config.file=/etc/loki/config.yaml -target=write"
    ports:
      - 3102:3100
      - 7946
      - 9095
    volumes:
      - ./loki-config.yaml:/etc/loki/config.yaml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - minio
    extends:
      file: docker-compose-common.yaml
      service: microservice-configs

  alloy:
    image: grafana/alloy:latest
    volumes:
      - ./alloy-local-config.yaml:/etc/alloy/config.alloy:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command:  run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy
    ports:
      - 12345:12345
    depends_on:
      - gateway
    extends:
      file: docker-compose-common.yaml
      service: microservice-configs

  minio:
    image: minio/minio
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler && \
        minio server /data
    environment:
      - MINIO_ROOT_USER=loki
      - MINIO_ROOT_PASSWORD=supersecret
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
    ports:
      - 9000
    volumes:
      - ./.data/minio:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 15s
      timeout: 20s
      retries: 5
    extends:
      file: docker-compose-common.yaml
      service: microservice-configs

  prometheus:
    image: prom/prometheus:v3.1.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ../observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    extends:
      file: docker-compose-common.yaml
      service: network-deploy-service

  tempo:
    image: grafana/tempo:2.6.1
    container_name: tempo
    command: -config.file /etc/tempo-config.yml
    ports:
      - "3110:3100"
      - "4318:4318"
    volumes:
      - ../observability/tempo/tempo.yml:/etc/tempo-config.yml
    extends:
      file: docker-compose-common.yaml
      service: network-deploy-service

  grafana:
    image: grafana/grafana:11.4.0
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    depends_on:
      - gateway
    entrypoint:
      - sh
      - -euc
      - |
        /run.sh
    ports:
      - "3000:3000"
    volumes:
      - ../observability/grafana/datasource.yaml:/etc/grafana/provisioning/datasources/datasource.yml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    extends:
      file: docker-compose-common.yaml
      service: network-deploy-service

  backend:
    image: grafana/loki:latest
    volumes:
      - ./loki-config.yaml:/etc/loki/config.yaml
    ports:
      - "3100"
      - "7946"
    command: "-config.file=/etc/loki/config.yaml -target=backend -legacy-read-mode=false"
    depends_on:
      - gateway
    extends:
      file: docker-compose-common.yaml
      service: microservice-configs
    

  gateway:
    image: nginx:latest
    depends_on:
      - read
      - write
    entrypoint:
      - sh
      - -euc
      - |
        cat <<EOF > /etc/nginx/nginx.conf
        user  nginx;
        worker_processes  5;  ## Default: 1

        events {
          worker_connections   1000;
        }

        http {
          resolver 127.0.0.11;

          server {
            listen             3100;

            location = / {
              return 200 'OK';
              auth_basic off;
            }

            location = /api/prom/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /api/prom/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /api/prom/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }

            location = /loki/api/v1/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /loki/api/v1/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /loki/api/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }
          }
        }
        EOF
        /docker-entrypoint.sh nginx -g "daemon off;"
    ports:
      - "3100:3100"
    healthcheck:
      test: ["CMD", "service", "nginx", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    extends:
      file: docker-compose-common.yaml
      service: microservice-configs
  # rabbit:
  #   image: "rabbitmq:management-alpine"
  #   container_name: rabbit
  #   ports:
  #   - "5672:5672"
  #   - "15672:15672"
  #   healthcheck:
  #     test: [ "CMD", "rabbitmq-diagnostics", "check_running" ]
  #     interval: 30s
  #     timeout: 30s
  #     retries: 5
  #     start_period: 30s
  #   extends:
  #     file: docker-compose-common.yaml
  #     service: network-deploy-service

  config-server:
    image: "martialtech/config-server:v6"
    container_name: config-server-ms
    ports:
      - "8071:8071"
    # depends_on:
    #   rabbit:
    #    condition: service_healthy
    healthcheck:
      test: "curl --fail --silent localhost:8071/actuator/health/readiness | grep UP || exit1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    extends:
      file: docker-compose-common.yaml
      service: microservice-base-config
    environment:
      SPRING_APPLICATION_NAME: "config-server"

  eureka-server:
    image: "martialtech/eureka-server:v3"
    container_name: eureka-server
    ports:
      - "8070:8070"
    healthcheck:
      test: "curl --fail --silent localhost:8070/actuator/health/readiness | grep UP || exit1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    extends:
      file: docker-compose-common.yaml
      service: microservice-eureka-server-config
    environment:
      SPRING_APPLICATION_NAME: "eureka-server"

  gateway-server:
    image: "martialtech/gateway:v2"
    container_name: gateway
    ports:
    - "8072:8072"
    extends:
      file: docker-compose-common.yaml
      service: microservice-gateway-server-config
    environment:
      SPRING_APPLICATION_NAME: "gatewayserver"      

  accounts:
    image: "martialtech/accounts:v6"
    container_name: accounts-ms
    healthcheck:
      test: "curl --fail --silent localhost:8080/actuator/health/readiness | grep UP || exit1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    ports:
    - "8080:8080"
    extends:
      file: docker-compose-common.yaml
      service: microservice-configs
    environment:
      OTEL_SERVICE_NAME: "accounts"
      SPRING_APPLICATION_NAME: "accounts"

  cards:
    image: "martialtech/cards:v6"
    container_name: cards-ms
    ports:
      - "9000:9000"
    healthcheck:
      test: "curl --fail --silent localhost:9000/actuator/health/readiness | grep UP || exit1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    extends:
      file: docker-compose-common.yaml
      service: microservice-configs
    environment:
      OTEL_SERVICE_NAME: "cards"
      SPRING_APPLICATION_NAME: "cards"

  loans:
    image: "martialtech/loans:v6"
    container_name: loans-ms
    ports:
      - "8090:8090"
    healthcheck:
      test: "curl --fail --silent localhost:8090/actuator/health/readiness | grep UP || exit1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    extends:
      file: docker-compose-common.yaml
      service: microservice-configs
    environment:
      OTEL_SERVICE_NAME: "loans"
      SPRING_APPLICATION_NAME: "loans"
   
networks:
  loansNetwork:
    driver: "bridge"
